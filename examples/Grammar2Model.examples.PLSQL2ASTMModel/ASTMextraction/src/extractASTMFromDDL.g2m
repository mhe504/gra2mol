-- *******************************************************************************
-- * Copyright (c) 2010
-- * All rights reserved. This program and the accompanying materials
-- * are made available under the terms of the Eclipse Public License v1.0
-- * which accompanies this distribution, and is available at
-- * http://www.eclipse.org/legal/epl-v10.html
-- *
-- * Contributors:
-- *    Javier Canovas (jlcanovas@um.es) 
-- *******************************************************************************


--------------------------------------------------------------------------------------
-- Gra2MoL transformation definition for extracting ASTM models from PL/SQL DDL
-- Author: Javier Luis Canovas Izquierdo (jlcanovas@um.es)
--
-- TODO: 
--------------------------------------------------------------------------------------

hash columnTypeType
	"VARCHAR2" -> "VARCHAR",
	"NUMBER" -> "NUMBER",
	"DATE" -> "DATE"	
end_hash

rule 'mapProject'
	from ccompilationUnit sf
	to astm::gastm::Project
	queries
		cu : //#CST;
	mappings
		files = cu;
end_rule

rule 'mapCompilationUnit'
	from CST cst
	to astm::gastm::CompilationUnit
	queries
		cts : /cst//sql_dump/#create_table;
	mappings
		language = "PL/SQL";
		fragments = cts;
end_rule

rule 'mapRDBTableDefinition'
	from	create_table ct
	to		astm::sastm::RDBTableDefinition
	queries
		-- Table columns
		cols  : /ct//#column;
		-- Primary Keys
		pks   : /ct//#constraint;

	mappings
		identifierName = new astm::gastm::Name;
		identifierName.nameString  = ct.IDENTIFER;
		Column = cols;
		PrimKey = pks;
end_rule

rule 'mapRDBColumnDefinition'
	from column col
	to astm::sastm::RDBColumnDefinition
	queries
		notnull   	: /col/#column_optitions{NOT.exists};	
		isString	: /col/#data_type{VARCHAR.exists || VARBINARY.exists};
		isInt		: /col/#data_type{INT.exists};
		isFloat		: /col/#data_type{FLOAT.exists};
		isTimestamp	: /col/#data_type{DATE_TIME.exists || DATETIME.exists};
		isBoolean	: /col/#data_type{BIT.exists};
		isFile		: /col/#data_type{XML.exists};
		isLong		: /col/#data_type{BIGINT.exists};
		isUID	 	: /col/#data_type{UNIQUEIDENTIFIER.exists};
	mappings
		identifierName = new astm::gastm::Name;
		identifierName.nameString  = col.IDENTIFER;
		if(isString.hasResults) then
			type = new astm::sastm::RDBString;
		else
			if(isInt.hasResults) then
				type = new astm::sastm::RDBInt;
			else
				if(isFloat.hasResults) then
					type = new astm::sastm::RDBFloat;
				else
					if(isTimestamp.hasResults) then
						type = new astm::sastm::RDBTimestamp;
					else
						if(isBoolean.hasResults) then
							type = new astm::sastm::RDBBoolean;
						else
							if(isFile.hasResults) then
								type = new astm::sastm::RDBBFile;
							else
								if(isLong.hasResults) then
									type = new astm::sastm::RDBLong;
								else
									if(isUID.hasResults) then
										type = new astm::sastm::RDBRowid;
									end_if
								end_if
							end_if
						end_if
					end_if
				end_if
			end_if
		end_if
		--typeParam = col.NUMBER;
		if(notnull.hasResults) then
			NotNull = "false";
		end_if
end_rule

-----------------------------------------------------
-- PRIMARY KEY
-----------------------------------------------------

rule 'mapRDBColumnReference'
	from constraint pk
	to astm::sastm::RDBColumnReference
	queries
		table  : //#create_table//constraint{this.check(pk)};
		colref : /pk/#ref;
		colDef : /table//#column{IDENTIFER.eq(colref.IDENTIFER)};	
	mappings
		name = new astm::gastm::Name;
		name.nameString = pk.IDENTIFER;
		refersTo = colDef;
end_rule
